ted.links[order(ted.counts,decreasing=TRUE)][1:3]
ted.links[order(ted.counts,decreasing=TRUE)][1:3]
require(rjson)
install.packages("rjson")
require(rjson)
require(RCurl)
facebook <-  function( path = "me", access_token, options){
if( !missing(options) ){
options <- sprintf( "?%s", paste( names(options), "=", unlist(options), collapse = "&", sep = "" ) )
} else {
options <- ""
}
data <- getURL( sprintf( "https://graph.facebook.com/%s%s&access_token=%s", path, options, access_token ) )
fromJSON( data )
}
myposts <- list()
i <- 0
next.path <- "me/posts"
while(length(next.path)!=0) {
i<-i+1
myposts[[i]] <- facebook(path=next.path , access_token=access_token)
next.path <- sub("https://graph.facebook.com/", "", myposts[[i]]$paging$'next')
}
myposts[[i]] <- NULL
myposts
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
load("C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpeciesOnline/ChaoSpeciesOnline/data/Ant.rda")
Ant
load("C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpeciesOnline/ChaoSpeciesOnline/data/Birds.rda")
Birds
require(ChaoSpecies)
?ChaoSpecies
data(Spider)
ChaoSpecies(Spider, "abundance")
data(Seedlings_Pre)
?DataTransform
DataTransform(Seedlings_Pre, "MatrixInci")
Seedlings_Pre <- DataTransform(Seedlings_Pre, "MatrixInci")
ChaoSpecies(Seedlings_Pre, "abundance")
require(ChaoSpecies)
?ChaoSpecies
data(Spider)
data(Seedlings_Pre)
data(Ant)
data(Birds)
data(Coin)
data(Spider)
data(Seedlings_Pre)
data(Seedlings_Freq)
data(Seedlings_Counts)
Coin <- DataTransform(Coin, "FreqCount")
Seedlings_Pre <- DataTransform(Seedlings_Pre, "MatrixInci")
Seedlings_Freq <- DataTransform(Seedlings_Freq, "MatrixAbun")
Seedlings_Counts <- DataTransform(Seedlings_Counts, "InciCount")
ChaoSpecies(Birds, "abundance")
require(ChaoSpeciesOnline)
detach("package:ChaoSpecies", unload=TRUE)
require(ChaoSpeciesOnline)
ChaoSpeciesOnline(Birds, "abundance")
data <- Birds
data
k=10
if (k != round(k) || k < 0)
stop("Error: The cutoff t to define less abundant species must be non-negative integer!")
if (is.numeric(conf) == FALSE || conf > 1 || conf < 0)
stop("Error: confidence level must be a numerical value between 0 and 1, e.g. 0.95")
if (is.matrix(data) == T || is.data.frame(data) == T){
if (ncol(data) != 1 & nrow(data) != 1)
stop("Error: The data format is wrong.")
if (ncol(data) == 1){
data <- data[, 1]
} else {
data <- data[1, ]
}
}
conf = 0.95
data <- as.numeric(round(data))
data
f <- function(i, data){length(data[which(data == i)])}
if (f(1, data) == sum(data)){
stop("Error: The information of data is not enough.")}
if (detail == T) basicAbuncat(data, k)
ChaoSpeciesOnline(Birds, "abundance")
data
data <- as.numeric(data)
x <- data[which(data != 0)]
n <- sum(x)
D <- length(x)
n_rare <- sum(x[which(x <= k)])
D_rare <- length(x[which(x <= k)])
if (n_rare != 0){
C_rare <- 1 - f(1, x)/n_rare
} else {
C_rare = 1
}
n_abun <- n - n_rare
D_abun <- length(x[which(x > k)])
j <- c(1:k)
a1 <- sum(sapply(j, function(j)j*(j - 1)*f(j, x)))
a2 <- sum(sapply(j, function(j)j*f(j, x)))
if (C_rare != 0){
gamma_rare_hat_square <- max(D_rare/C_rare*a1/a2/(a2 - 1) - 1, 0)
gamma_rare_1_square <- max(gamma_rare_hat_square*(1 + (1 - C_rare)/C_rare*a1/(a2 - 1)), 0)
}else{
gamma_rare_hat_square <- 0
gamma_rare_1_square <- 0
}
CV_rare <- sqrt(gamma_rare_hat_square)
CV1_rare <- sqrt(gamma_rare_1_square)
f <- function(i, data){length(data[which(data == i)])}
r <- c(1:k)
rsg <- matrix(sapply(r, function(r)f(r, x)), 1, k)
cat("(1) BASIC DATA INFORMATION  \n ", fill = TRUE)
cat("             (Number of observed individuals)  n ", sep = " = ", n, fill = TRUE)
cat("             (Number of observed species)      D ", sep = " = ", D, fill = TRUE)
cat("             (Cut-off point)                   k ", sep = "  = ", k, fill = TRUE)
cat("\n", fill = TRUE)
cat("   \"Rare\" Shared Species Group: (Frequencies counts up to cut-off point k)", fill = TRUE)
cat("          Some Statistics:", fill = TRUE)
cat("          ---------------------------------------------------------------------", fill = TRUE)
cat("         ", paste("f1 =", rsg[1], "; ","f2 =", rsg[2], "; ",
"f3 =", rsg[3], "; ","f4 =", rsg[4], "; ",
"f5 =", rsg[5], "; ","f6 =", rsg[6], "; ",
"f7 =", rsg[7], "; ","f8 =", rsg[8], "; ",
"f9 =", rsg[9], "; ","f10 =", rsg[10]), fill = TRUE)
cat("          ---------------------------------------------------------------------", fill = TRUE)
cat("               (Number of observed individuals for rare species)      n_rare",  sep = " = ", n_rare, fill = TRUE)
cat("               (Number of observed species for rare species)          D_rare",  sep = " = ", D_rare, fill = TRUE)
cat("               (Estimation of the sample converage for rare species)  C_rare" , sep = " = ", C_rare, fill = TRUE)
cat("               (Estimation of CV for rare species in ACE)             CV_rare", sep = " = ", CV_rare, fill = TRUE)
cat("               (Estimation of CV1 for rare species in ACE-1)          CV1_rare", sep = " = ", CV1_rare, fill = TRUE)
cat("\n", fill = TRUE)
cat("   \"Abundant\" Species Group: (Frequencies beyond the cut-off point) ", fill = TRUE)
cat("               (Number of observed individuals for abundant species)      n_abun",  sep = " = ", n_abun, fill = TRUE)
cat("               (Number of observed species for abundant species)          D_abun",  sep = " = ", D_abun, fill = TRUE)
cat("\n", fill = TRUE)
source('C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpeciesOnline/ChaoSpeciesOnline/R/basicAbuncat.R', echo=TRUE)
source('C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpeciesOnline/ChaoSpeciesOnline/R/ChaoSpecies.R', echo=TRUE)
ChaoSpeciesOnline(Birds, "abundance")
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpeciesOnline/ChaoSpeciesOnline/R/basicAbuncat.R', echo=TRUE)
require(ChaoSpeciesOnline)
ChaoSpeciesOnline(Birds, "abundance")
ChaoSpeciesOnline(Birds, "abundance")
source('C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpeciesOnline/ChaoSpeciesOnline/R/basicAbuncat.R', echo=TRUE)
ChaoSpeciesOnline(Birds, "abundance")
basicAbuncat <- function(data, k){
data <- as.numeric(data)
x <- data[which(data != 0)]
n <- sum(x)
D <- length(x)
n_rare <- sum(x[which(x <= k)])
D_rare <- length(x[which(x <= k)])
f <- function(i, data){length(data[which(data == i)])}
if (n_rare != 0){
C_rare <- 1 - f(1, x)/n_rare
} else {
C_rare = 1
}
n_abun <- n - n_rare
D_abun <- length(x[which(x > k)])
j <- c(1:k)
a1 <- sum(sapply(j, function(j)j*(j - 1)*f(j, x)))
a2 <- sum(sapply(j, function(j)j*f(j, x)))
if (C_rare != 0){
gamma_rare_hat_square <- max(D_rare/C_rare*a1/a2/(a2 - 1) - 1, 0)
gamma_rare_1_square <- max(gamma_rare_hat_square*(1 + (1 - C_rare)/C_rare*a1/(a2 - 1)), 0)
}else{
gamma_rare_hat_square <- 0
gamma_rare_1_square <- 0
}
CV_rare <- sqrt(gamma_rare_hat_square)
CV1_rare <- sqrt(gamma_rare_1_square)
r <- c(1:k)
rsg <- matrix(sapply(r, function(r)f(r, x)), 1, k)
cat("(1) BASIC DATA INFORMATION  \n ", fill = TRUE)
cat("             (Number of observed individuals)  n ", sep = " = ", n, fill = TRUE)
cat("             (Number of observed species)      D ", sep = " = ", D, fill = TRUE)
cat("             (Cut-off point)                   k ", sep = "  = ", k, fill = TRUE)
cat("\n", fill = TRUE)
cat("   \"Rare\" Shared Species Group: (Frequencies counts up to cut-off point k)", fill = TRUE)
cat("          Some Statistics:", fill = TRUE)
cat("          ---------------------------------------------------------------------", fill = TRUE)
cat("         ", paste("f1 =", rsg[1], "; ","f2 =", rsg[2], "; ",
"f3 =", rsg[3], "; ","f4 =", rsg[4], "; ",
"f5 =", rsg[5], "; ","f6 =", rsg[6], "; ",
"f7 =", rsg[7], "; ","f8 =", rsg[8], "; ",
"f9 =", rsg[9], "; ","f10 =", rsg[10]), fill = TRUE)
cat("          ---------------------------------------------------------------------", fill = TRUE)
cat("               (Number of observed individuals for rare species)      n_rare",  sep = " = ", n_rare, fill = TRUE)
cat("               (Number of observed species for rare species)          D_rare",  sep = " = ", D_rare, fill = TRUE)
cat("               (Estimation of the sample converage for rare species)  C_rare" , sep = " = ", C_rare, fill = TRUE)
cat("               (Estimation of CV for rare species in ACE)             CV_rare", sep = " = ", CV_rare, fill = TRUE)
cat("               (Estimation of CV1 for rare species in ACE-1)          CV1_rare", sep = " = ", CV1_rare, fill = TRUE)
cat("\n", fill = TRUE)
cat("   \"Abundant\" Species Group: (Frequencies beyond the cut-off point) ", fill = TRUE)
cat("               (Number of observed individuals for abundant species)      n_abun",  sep = " = ", n_abun, fill = TRUE)
cat("               (Number of observed species for abundant species)          D_abun",  sep = " = ", D_abun, fill = TRUE)
cat("\n", fill = TRUE)
}
ChaoSpeciesOnline(Birds, "abundance")
source('C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpeciesOnline/ChaoSpeciesOnline/R/ChaoSpecies.R', echo=TRUE)
ChaoSpeciesOnline(Birds, "abundance")
ChaoSpeciesOnline <-
function(data, datatype = c("abundance", "incidence"), method = c("all", "Homogeneous", "Chao", "CE", "Jackknife"),
k = 10, conf = 0.95, detail = c("TRUE", "FALSE")){
method <- match.arg(method)
if (k != round(k) || k < 0)
stop("Error: The cutoff t to define less abundant species must be non-negative integer!")
if (is.numeric(conf) == FALSE || conf > 1 || conf < 0)
stop("Error: confidence level must be a numerical value between 0 and 1, e.g. 0.95")
if (is.matrix(data) == T || is.data.frame(data) == T){
if (ncol(data) != 1 & nrow(data) != 1)
stop("Error: The data format is wrong.")
if (ncol(data) == 1){
data <- data[, 1]
} else {
data <- data[1, ]
}
}
data <- as.numeric(round(data))
if (datatype == "abundance"){
f <- function(i, data){length(data[which(data == i)])}
if (f(1, data) == sum(data)){
stop("Error: The information of data is not enough.")}
if (detail == T) basicAbuncat(data, k)
SpeciesAbundance(data, method = method, k = k, conf = conf)
} else {
dat <- data[-1]; Q <- function(i, data){length(data[which(data == i)])}
if (Q(1, dat) == sum(dat)){
stop("Error: The information of data is not enough.")}
if (detail == T) basicIncicat(data, k)
SpeciesIncidence(data, method = method, k = k, conf = conf)
}
}
ChaoSpeciesOnline(Birds, "abundance")
if (detail == T) basicIncicat(data, k)
if (detail == T) basicAbuncat(data, k)
detail == T
mean
getAnywhere(mean)
getAnywhere(mean.default)
ChaoSpeciesOnline <-
function(data, datatype = c("abundance", "incidence"), method = c("all", "Homogeneous", "Chao", "CE", "Jackknife"),
k = 10, conf = 0.95, detail = TRUE){
method <- match.arg(method)
if (k != round(k) || k < 0)
stop("Error: The cutoff t to define less abundant species must be non-negative integer!")
if (is.numeric(conf) == FALSE || conf > 1 || conf < 0)
stop("Error: confidence level must be a numerical value between 0 and 1, e.g. 0.95")
if (is.matrix(data) == T || is.data.frame(data) == T){
if (ncol(data) != 1 & nrow(data) != 1)
stop("Error: The data format is wrong.")
if (ncol(data) == 1){
data <- data[, 1]
} else {
data <- data[1, ]
}
}
data <- as.numeric(round(data))
if (datatype == "abundance"){
f <- function(i, data){length(data[which(data == i)])}
if (f(1, data) == sum(data)){
stop("Error: The information of data is not enough.")}
if (detail == T) basicAbuncat(data, k)
SpeciesAbundance(data, method = method, k = k, conf = conf)
} else {
dat <- data[-1]; Q <- function(i, data){length(data[which(data == i)])}
if (Q(1, dat) == sum(dat)){
stop("Error: The information of data is not enough.")}
if (detail == T) basicIncicat(data, k)
SpeciesIncidence(data, method = method, k = k, conf = conf)
}
}
ChaoSpeciesOnline(Birds, "abundance")
getAnywhere(mean.default)
ChaoSpeciesOnline(Birds, "abundance")
basicAbuncat(Birds, 10)
Birds
basicAbuncat(t(Birds), 10)
Coin
basicAbuncat(Coin, 10)
source('C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpeciesOnline/ChaoSpeciesOnline/R/basicAbuncat.R', echo=TRUE)
basicAbuncat(Birds, 10)
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
remove.packages("ChaoSpecies")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
detach("package:ChaoSpeciesOnline", unload=TRUE)
remove.packages("ChaoSpeciesOnline")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
library(devtools)
install_github('ChaoSpeciesOnline','ddd7975')
library(ChaoSpeciesOnline)
#?ChaoSpecies
library(knitr)
library(shiny)
runApp("ChaoSpeciesApp_test")
loadPaste <- reactive({
if(input$datatype == 'abundance'){
text <- input$copyAndPaste_abun
}else{
text <- input$copyAndPaste_inci
}
Fun <- function(e){
temp <- lapply(readLines(textConnection(text)), function(x) scan(text = x, what = 'char'))
out <- list()
out.name <- 0
for (i in seq_along(temp)){
out.name[i] <- temp[[i]][1]
out[[i]] <- as.numeric(temp[[i]][-1])
}
names(out) <- t(data.frame(out.name))
out
}
tryCatch(Fun(e), error = function(e){return()})
})
getDataName <- reactive({
Fun <- function(e){
out <- loadPaste()
out.name <- names(out)
if(is.na(names(out)[1]) == TRUE){
dat <- paste("No data")
dat
}else{
dat <- out
for(i in seq_along(out)){
dat[[i]] <- out.name[i]
}
dat
}
}
tryCatch(Fun(e), error = function(e){return()})
})
#Select data
output$dataname <- renderUI({
dat <- getDataName()
selectInput("dataset", "Data", choices = dat, selected = dat[1])
})
selectedData <- reactive({
out <- loadPaste()
selected <- 1
dataset <- list()
for(i in seq_along(input$dataset)){
selected[i] <- which(names(out) == input$dataset[i])
}
for(i in seq_along(selected)){
k <- selected[i]
dataset[[i]] <- out[[k]]
}
names(dataset) <- input$dataset
return(dataset)
})
runApp("ChaoSpeciesApp_test")
runApp("ChaoSpeciesApp_test")
